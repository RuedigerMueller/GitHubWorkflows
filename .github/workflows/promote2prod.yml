name: Deploy image under test to Heroku for manual test

on:
  workflow_call:
    inputs:
      DOCKERHUB_USERNAME:
        required: true
        type: string
      DOCKERHUB_REPOSITORY:
        required: true
        type: string
      HEROKU_REPOSITORY:
        required: true
        type: string
      SCP_APP_NAME:
        required: true
        type: string
      SCP_DB_NAME:
        required: false
        type: string
    secrets:
      DOCKERHUB_TOKEN:
        required: true
      HEROKU_API_KEY:
        required: true
      SCP_USER:
        required: true
      SCP_PASSWORD:
        required: true
      SCP_ORG:
        required: true
      SCP_SPACE:
        required: true
      JWT_SECRET:
        required: false

jobs:
  promoto_to_Heroku:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ inputs.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull image from Docker Hub, tag it as released and deploy & release on Heroku prod space
        run: |
            docker pull ${{ inputs.DOCKERHUB_USERNAME }}/${{ inputs.DOCKERHUB_REPOSITORY }}:undertest
            docker tag ${{ inputs.DOCKERHUB_USERNAME }}/${{ inputs.DOCKERHUB_REPOSITORY }}:undertest ${{ inputs.DOCKERHUB_USERNAME }}/${{ inputs.DOCKERHUB_REPOSITORY }}:released
            docker push ${{ inputs.DOCKERHUB_USERNAME }}/${{ inputs.DOCKERHUB_REPOSITORY }}:released
            echo ${{ secrets.HEROKU_API_KEY }} | docker login -u=_ --password-stdin registry.heroku.com
            docker tag ${{ inputs.DOCKERHUB_USERNAME }}/${{ inputs.DOCKERHUB_REPOSITORY }}:released registry.heroku.com/${{ inputs.HEROKU_REPOSITORY }}/web
            docker push registry.heroku.com/${{ inputs.HEROKU_REPOSITORY }}/web
            HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }} heroku container:release web --app ${{ inputs.HEROKU_REPOSITORY }}
  
  promote_to_SAP_BTP:
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Cloud Foundry CLI
      run: |
            sudo curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&source=github&version=v7'
            sudo dpkg -i cf-cli_amd64.deb
    - name: Deploy to Cloud Foundry in dark mode
      run: |
            cf -v
            cf api https://api.cf.eu10.hana.ondemand.com
            cf auth "${{ secrets.SCP_USER }}" "${{ secrets.SCP_PASSWORD }}"
            cf target -o "${{ secrets.SCP_ORG }}" -s "${{ secrets.SCP_SPACE }}"
            cf push ${{ inputs.SCP_APP_NAME }}_green --no-start
    - name: Bind to DB if required
      if: ${{ inputs.SCP_DB_NAME }}
      run: cf bind-service ${{ inputs.SCP_APP_NAME }}_green ${{ inputs.SCP_DB_NAME }}
    - name: Check if JWT_SECRET has to be set
      id: CHECK_JWT
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
          echo "Enable set JWT_SECRET ${{ env.JWT_SECRET != '' }}"
          echo "::set-output name=enableSetJWTSECRET::${{ env.JWT_SECRET != '' }}"
    - name: Set environment and start
      if: steps.CHECK_JWT.outputs.enableSetJWTSECRET == 'true'
      run: cf set-env ${{ inputs.SCP_APP_NAME }}_green JWT_SECRET "${{ secrets.JWT_SECRET }}"
    - name: Start app
      run: cf start ${{ inputs.SCP_APP_NAME }}_green
    - name: Re-route trafic to updated app
      run: |
            cf map-route ${{ inputs.SCP_APP_NAME }}_green cfapps.eu10.hana.ondemand.com --hostname v${{ inputs.SCP_APP_NAME }}
    - name: Unmap route to blue app and delete it
      run: |
            cf unmap-route ${{ inputs.SCP_APP_NAME }}_blue cfapps.eu10.hana.ondemand.com --hostname ${{ inputs.SCP_APP_NAME }}
            cf stop ${{ inputs.SCP_APP_NAME }}_blue
            cf delete ${{ inputs.SCP_APP_NAME }}_blue -f
      continue-on-error: true
    - name: Rename green app and delete temporary route
      run: |   
            cf rename ${{ inputs.SCP_APP_NAME }}_green ${{ inputs.SCP_APP_NAME }}_blue
            cf delete-route cfapps.eu10.hana.ondemand.com --hostname ${{ inputs.SCP_APP_NAME }}_green -f